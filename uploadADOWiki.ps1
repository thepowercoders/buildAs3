#----------------------------------------------------------------------------------------------------------------------
#   Script:     uploadADOWiki.ps1
#   Author:     Antony Millington
#   Comments:
#       Uploads the markdown document created by as3Markdown.ps1 to an Azure DevOps project WIKI. NOTE: This script by defaults assumes
#        you are using the Azure DevOps PROJECT Wiki. An alternative is to publish a code wiki which directly takes markdown
#       files and creates a wiki from them (ref: https://learn.microsoft.com/en-us/azure/devops/project/wiki/publish-repo-to-wiki).
#       To use this script to publish to wiki, you need to create a PAT token* so the script can write into the wiki.
#
#     * https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate
#     It is recommended that the scope of the PAT is restricted to Read/Write to Wiki only.
#
#       Mandatory Parameters:   -PAT (personal access token)
#       Optional Parameters:    -Update (updates existing document. If this is omitted and the document exists, the
#                                       script errors out instead of updating).
#                               -CodeWiki (allows you to use this script to update a code wiki)
#
#       The script needs the following files:
#           1. A markdown text file generated by the 'as3Markdown.ps1' PowerShell script. The
#              file is called '<azure-tenant>_as3.md'.
#
#----------------------------------------------------------------------------------------------------------------------
param(
    [Parameter(Mandatory=$true)][string]$AzTenant,
    [Parameter(Mandatory=$true)][string]$Organisation,
    [Parameter(Mandatory=$true)][string]$Project,
    [Parameter(Mandatory=$true)][string]$Wiki,
    [Parameter(Mandatory=$true)][string]$PAT,
    [Parameter(Mandatory=$false)][switch]$Update,
    [Parameter(Mandatory=$false)][switch]$CodeWiki
)
# Set the standard title of the WIKI Page:
$documentTitle = "F5 BIG-IP Application Configuration"
# If the WIKI page needs to be in a subfolder, specify the path here (no '/' needed at end of path):
$wikiFolderPath = ""

function UrlEncode {
    param (
        [string]$value
    )
    return [System.Web.HttpUtility]::UrlEncode($value)
}
function Update-Wiki {
    param (
        [string]$repo,
        [string]$project,
        [string]$wiki,
        [string]$page,
        [string]$content,
        [string]$pat,
        [string]$branch = "main"  # Default branch can be set to 'main'
    )

    Write-Debug "function: Update-Wiki"
    $encodedPage = UrlEncode $page
    # for code wikis, you need a branch in the path, for the project wiki it isn't needed
    if($CodeWiki){
        $uri = "https://dev.azure.com/$repo/$project/_apis/wiki/wikis/$wiki/pages?path=$encodedPage&versionType=branch&version=$branch&api-version=7.1-preview.1"
    }else{
        $uri = "https://dev.azure.com/$repo/$project/_apis/wiki/wikis/$wiki/pages?path=$encodedPage&api-version=7.1-preview.1"
    }
    Write-Debug "URI is: $uri"
    $headers = @{
        Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
        "Content-Type"  = "application/json"
    }
    $body = @{
        content = $content
    } | ConvertTo-Json
        
    try {
        if($Update){
            Write-Debug "Trying API with an UPDATE"
            $etag=(Invoke-WebRequest -Method "GET" -Uri $uri -Headers $headers).Headers.ETag.trim('"')
            $docID=(Invoke-RestMethod -Method "GET" -Uri $uri -Headers $headers).id
            $headers.Add("If-Match", "`"$etag`"")
            $updateUri = "https://dev.azure.com/$repo/$project/_apis/wiki/wikis/$Wiki/pages/$($docID)?api-version=7.1-preview.1"
            Write-Host "Wiki page ID is: $docID, ETag is: $etag"
            $apiResponse=Invoke-WebRequest -Uri $updateUri -Headers $headers -Body $body -Method patch
        }else{
            Write-Debug "Trying API with a NEW PAGE"
            $apiResponse=Invoke-WebRequest -Method "PUT" -Uri $uri -Headers $headers -Body $body
        }
        Write-Output "Wiki page updated successfully."
        return $apiResponse
    } catch {
        $errmsg=($_ | ConvertFrom-json).message
        Write-Error "Failed to update wiki page: $errmsg"
    }
}

# Get current directory name
$dirPath=(Get-Item $PSCommandPath ).DirectoryName
$filePath = "$dirPath/$AzTenant"+"_as3.md"
Write-Host "Uploading Wiki.`nMarkdown File is: $filePath"

# Fetch data from the repository
if (Test-Path $filePath) {
    # Fetch data from the repository with correct line endings
    $data = Get-Content -Path $filePath -Raw
    if(!($data)){Write-Error "Failed to get content from the markdown file.";exit 1}else{Write-Debug "Get-Content from filepath worked."}
    # Update the wiki page
    if($wikiFolderPath){
        $apiReply=Update-Wiki -repo $Organisation -project $Project -wiki $Wiki -page "$wikiFolderPath/$documentTitle/" -content $data -pat $PAT
    }else{
        $apiReply=Update-Wiki -repo $Organisation -project $Project -wiki $Wiki -page "$documentTitle" -content $data -pat $PAT
    }
    Write-Host "Response is: $($apiReply.StatusCode) $($apiReply.StatusDescription)"
} else {
    Write-Error "The file $filePath does not exist."
}
