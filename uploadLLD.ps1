#----------------------------------------------------------------------------------------------------------------------
#   Script:     uploadLLD.ps1
#   Author:     Antony Millington
#   Comments:
#       Uploads the LLD created by as3LLDWikiGenerator.ps1 to the project WIKI.
#       Mandatory Parameters:   -PAT (personal access token)*
#       Optional Parameters:    -Update (updates existing document. If this is omitted and the document exists, the
#                                       script errors out instead of updating).
#
#       The script needs the following files:
#           1. An LLD file generated by the 'as3LLDWikiGenerator' PowerShell script in the /declarations folder. The
#              file is called 'lld_wiki_as3.md'.
#
#   * https://learn.microsoft.com/en-us/azure/devops/organizations/accounts/use-personal-access-tokens-to-authenticate
#     It is recommended that the scope of the PAT is restricted to Read/Write to Wiki only.
#----------------------------------------------------------------------------------------------------------------------
param(
    [Parameter(Mandatory=$true)][string]$Organisation,
    [Parameter(Mandatory=$true)][string]$Project,
    [Parameter(Mandatory=$true)][string]$Wiki,
    [Parameter(Mandatory=$true)][string]$Environment,
    [Parameter(Mandatory=$true)][string]$PAT,
    [Parameter(Mandatory=$false)][switch]$Update
)
$documentTitle = "F5 bigip Low Level Design"
# Get current directory name (this will be the as3 partition name)
$dirPath=(Get-Item $PSCommandPath ).DirectoryName
$buildDirectory = Split-Path -Path $dirPath -Leaf
$filePath = "$buildDirectory/lld_wiki_as3.md"
Write-Host "Uploading Wiki.`nBuild Directory (AS3 Partition) is: $buildDirectory"


function UrlEncode {
    param (
        [string]$value
    )
    return [System.Web.HttpUtility]::UrlEncode($value)
}
function Update-Wiki {
    param (
        [string]$repo,
        [string]$project,
        [string]$wiki,
        [string]$page,
        [string]$content,
        [string]$pat,
        [string]$branch = "main"  # Default branch can be set to 'main'
    )

    $encodedPage = UrlEncode $page
    $uri = "https://dev.azure.com/$repo/$project/_apis/wiki/wikis/$wiki/pages?path=/$encodedPage&versionType=branch&version=$branch&api-version=7.1-preview.1"
    $headers = @{
        Authorization = "Basic " + [Convert]::ToBase64String([Text.Encoding]::ASCII.GetBytes(":$pat"))
        "Content-Type"  = "application/json"
    }
    $body = @{
        content = $content
    } | ConvertTo-Json
        
    try {
        if($Update){
            $etag=(Invoke-WebRequest -Method "GET" -Uri $uri -Headers $headers).Headers.ETag.trim('"')
            $docID=(Invoke-RestMethod -Method "GET" -Uri $uri -Headers $headers).id
            $headers.Add("If-Match", "`"$etag`"")
            $updateUri = "https://dev.azure.com/$repo/$project/_apis/wiki/wikis/$Wiki/pages/$($docID)?api-version=7.1-preview.1"
            Write-Host "Wiki page ID is: $docID, ETag is: $etag"
            $apiResponse=Invoke-WebRequest -Uri $updateUri -Headers $headers -Body $body -Method patch
        }else{
            $apiResponse=Invoke-WebRequest -Method "PUT" -Uri $uri -Headers $headers -Body $body
        }
        Write-Output "Wiki page updated successfully."
        return $apiResponse
    } catch {
        Write-Error "Failed to update wiki page: $_"
    }
}

# Fetch data from the repository
if (Test-Path $filePath) {
    # Fetch data from the repository with correct line endings
    $data = Get-Content -Path $filePath -Raw
    # Update the wiki page
    $apiReply=Update-Wiki -repo $Organisation -project $Project -wiki $Wiki -page "Documentation/Infrastructure/Solution/$documentTitle - $Environment" -content $data -pat $PAT
    Write-Host "Response is: $($apiReply.StatusCode) $($apiReply.StatusDescription)"
} else {
    Write-Error "The file $filePath does not exist."
}
